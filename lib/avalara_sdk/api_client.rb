=begin
#Avalara Shipping Verification for Beverage Alcohol

#API for evaluating transactions against direct-to-consumer Beverage Alcohol shipping regulations.  This API is currently in beta. 

The version of the OpenAPI document: 2.1.0-beta

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.3.1

=end

require 'date'
require 'json'
require 'logger'
require 'tempfile'
require 'time'
require 'typhoeus'
require 'base64'
require 'uri'
require 'faraday'
require 'faraday/net_http'
require 'avalara_sdk/token_metadata'
Faraday.default_adapter = :net_http

module AvalaraSdk
  class ApiClient
    PRODUCTION_OPENID_CONFIG_URL = 'https://identity.avalara.com/.well-known/openid-configuration'
    SANDBOX_OPENID_CONFIG_URL = 'https://ai-sbx.avlr.sh/.well-known/openid-configuration'
    QA_OPENID_CONFIG_URL = 'https://ai-awsfqa.avlr.sh/.well-known/openid-configuration'

    # The Configuration object holding settings to be used in the API client.
    attr_accessor :config

    # The sdk version to be set in header
    attr_accessor :sdk_version

    # Defines the headers to be used in HTTP requests of all API calls by default.
    #
    # @return [Hash]
    attr_accessor :default_headers

    # The token url that will be used for the OAuth2 flows
    attr_accessor :token_url

    # Initializes the ApiClient
    # @option config [Configuration] Configuration for initializing the object, default to Configuration.default
    def initialize(config)

      if (config.nil?)
        fail ArgumentError,'configuration is nil'
      end

      @base_path=config.base_url()
      @sdk_version=""
      @config = config
      @default_headers = {
        'Content-Type' => 'application/json',
        'User-Agent' => @user_agent
      }
      @access_token_map = Hash.new
      @token_url=""

    end

    def self.default
      @@default ||= ApiClient.new(@config)
    end

    def set_sdk_version(sdk_version="")
      @sdk_version=sdk_version
    end

    # Call an API with given options.
    #
    # @return [Array<(Object, Integer, Hash)>] an array of 3 elements:
    #   the data deserialized from response body (could be nil), response status code and response headers.
    def call_api(http_method, path, opts = {})
      request = build_request(http_method, path, opts)
      response = request.run

      if @config.debugging
        @config.logger.debug "HTTP response body ~BEGIN~\n#{response.body}\n~END~\n"
      end

      unless response.success?
        if response.timed_out?
          fail ApiError.new('Connection timed out')
        elsif response.code == 0
          # Errors from libcurl will be made visible here
          fail ApiError.new(:code => 0,
                            :message => response.return_message)
        else
          fail ApiError.new(:code => response.code,
                            :response_headers => response.headers,
                            :response_body => response.body),
               response.status_message
        end
      end
      return response
    end

    # Builds the HTTP request
    #
    # @param [String] http_method HTTP method/verb (e.g. POST)
    # @param [String] path URL path (e.g. /account/new)
    # @option opts [Hash] :header_params Header parameters
    # @option opts [Hash] :query_params Query parameters
    # @option opts [Hash] :form_params Query parameters
    # @option opts [Object] :body HTTP body (JSON/XML)
    # @return [Typhoeus::Request] A Typhoeus Request
    def build_request(http_method, path, opts = {})
      url = build_request_url(path, opts)
      http_method = http_method.to_sym.downcase

      header_params = @default_headers.merge(opts[:header_params] || {})
      header_params['X-Avalara-Client']="#{@config.app_name};#{@config.app_version};RubySdk;#{@sdk_version};#{@config.machine_name}"
      query_params = opts[:query_params] || {}
      form_params = opts[:form_params] || {}

      # set ssl_verifyhosts option based on @config.verify_ssl_host (true/false)
      _verify_ssl_host = @config.verify_ssl_host ? 2 : 0

      req_opts = {
        :method => http_method,
        :headers => header_params,
        :params => query_params,
        :params_encoding => @config.params_encoding,
        :timeout => @config.timeout,
        :ssl_verifypeer => @config.verify_ssl,
        :ssl_verifyhost => _verify_ssl_host,
        :sslcert => @config.cert_file,
        :sslkey => @config.key_file,
        :verbose => @config.debugging
      }

      # set custom cert, if provided
      req_opts[:cainfo] = @config.ssl_ca_cert if @config.ssl_ca_cert

      if [:post, :patch, :put, :delete].include?(http_method)
        req_body = build_request_body(header_params, form_params, opts[:body])
        req_opts.update :body => req_body
        if @config.debugging
          @config.logger.debug "HTTP request body param ~BEGIN~\n#{req_body}\n~END~\n"
        end
      end

      request = Typhoeus::Request.new(url, req_opts)
      download_file(request) if opts[:return_type] == 'File'
      request
    end

    # Builds the HTTP request body
    #
    # @param [Hash] header_params Header parameters
    # @param [Hash] form_params Query parameters
    # @param [Object] body HTTP body (JSON/XML)
    # @return [String] HTTP body data in the form of string
    def build_request_body(header_params, form_params, body)
      # http form
      if header_params['Content-Type'] == 'application/x-www-form-urlencoded' ||
          header_params['Content-Type'] == 'multipart/form-data'
        data = {}
        form_params.each do |key, value|
          case value
          when ::File, ::Array, nil
            # let typhoeus handle File, Array and nil parameters
            data[key] = value
          else
            data[key] = value.to_s
          end
        end
      elsif body
        data = body.is_a?(String) ? body : body.to_json
      else
        data = nil
      end
      data
    end

    # Save response body into a file in (the defined) temporary folder, using the filename
    # from the "Content-Disposition" header if provided, otherwise a random filename.
    # The response body is written to the file in chunks in order to handle files which
    # size is larger than maximum Ruby String or even larger than the maximum memory a Ruby
    # process can use.
    #
    # @see Configuration#temp_folder_path
    def download_file(request)
      tempfile = nil
      encoding = nil
      request.on_headers do |response|
        content_disposition = response.headers['Content-Disposition']
        if content_disposition && content_disposition =~ /filename=/i
          filename = content_disposition[/filename=['"]?([^'"\s]+)['"]?/, 1]
          prefix = sanitize_filename(filename)
        else
          prefix = 'download-'
        end
        prefix = prefix + '-' unless prefix.end_with?('-')
        encoding = response.body.encoding
        tempfile = Tempfile.open(prefix, @config.temp_folder_path, encoding: encoding)
        @tempfile = tempfile
      end
      request.on_body do |chunk|
        chunk.force_encoding(encoding)
        tempfile.write(chunk)
      end
      request.on_complete do |response|
        if tempfile
          tempfile.close
          @config.logger.info "Temp file written to #{tempfile.path}, please copy the file to a proper folder "\
                              "with e.g. `FileUtils.cp(tempfile.path, '/new/file/path')` otherwise the temp file "\
                              "will be deleted automatically with GC. It's also recommended to delete the temp file "\
                              "explicitly with `tempfile.delete`"
        end
      end
    end

    # Check if the given MIME is a JSON MIME.
    # JSON MIME examples:
    #   application/json
    #   application/json; charset=UTF8
    #   APPLICATION/JSON
    #   */*
    # @param [String] mime MIME
    # @return [Boolean] True if the MIME is application/json
    def json_mime?(mime)
      (mime == '*/*') || !(mime =~ /Application\/.*json(?!p)(;.*)?/i).nil?
    end

    # Deserialize the response to the given return type.
    #
    # @param [Response] response HTTP response
    # @param [String] return_type some examples: "User", "Array<User>", "Hash<String, Integer>"
    def deserialize(response, return_type)
      body = response.body

      # handle file downloading - return the File instance processed in request callbacks
      # note that response body is empty when the file is written in chunks in request on_body callback
      return @tempfile if return_type == 'File'

      return nil if body.nil? || body.empty?

      # return response body directly for String return type
      return body if return_type == 'String'

      # ensuring a default content type
      content_type = response.headers['Content-Type'] || 'application/json'

      fail "Content-Type is not supported: #{content_type}" unless json_mime?(content_type)

      begin
        data = JSON.parse("[#{body}]", :symbolize_names => true)[0]
      rescue JSON::ParserError => e
        if %w(String Date Time).include?(return_type)
          data = body
        else
          raise e
        end
      end

      convert_to_type data, return_type
    end

    # Convert data to the given return type.
    # @param [Object] data Data to be converted
    # @param [String] return_type Return type
    # @return [Mixed] Data in a particular type
    def convert_to_type(data, return_type)
      return nil if data.nil?
      case return_type
      when 'String'
        data.to_s
      when 'Integer'
        data.to_i
      when 'Float'
        data.to_f
      when 'Boolean'
        data == true
      when 'Time'
        # parse date time (expecting ISO 8601 format)
        Time.parse data
      when 'Date'
        # parse date time (expecting ISO 8601 format)
        Date.parse data
      when 'Object'
        # generic object (usually a Hash), return directly
        data
      when /\AArray<(.+)>\z/
        # e.g. Array<Pet>
        sub_type = $1
        data.map { |item| convert_to_type(item, sub_type) }
      when /\AHash\<String, (.+)\>\z/
        # e.g. Hash<String, Integer>
        sub_type = $1
        {}.tap do |hash|
          data.each { |k, v| hash[k] = convert_to_type(v, sub_type) }
        end
      else
        # models (e.g. Pet) or oneOf
        klass = AvalaraSdk.const_get(return_type)
        klass.respond_to?(:openapi_one_of) ? klass.build(data) : klass.build_from_hash(data)
      end
    end

    # Sanitize filename by removing path.
    # e.g. ../../sun.gif becomes sun.gif
    #
    # @param [String] filename the filename to be sanitized
    # @return [String] the sanitized filename
    def sanitize_filename(filename)
      filename.gsub(/.*[\/\\]/, '')
    end

    def build_request_url(path, opts = {})
      # Add leading and trailing slashes to path
      path = "/#{path}".gsub(/\/+/, '/')
      @config.base_url() + path      
    end

    # Sets user agent in HTTP header
    #
    # @param [String] user_agent User agent (e.g. openapi-generator/ruby/1.0.0)
    def user_agent=(user_agent)
      @user_agent = user_agent
      @default_headers['User-Agent'] = @user_agent
    end

    # Return Accept header based on an array of accepts provided.
    # @param [Array] accepts array for Accept
    # @return [String] the Accept header (e.g. application/json)
    def select_header_accept(accepts)
      return nil if accepts.nil? || accepts.empty?
      # use JSON when present, otherwise use all of the provided
      json_accept = accepts.find { |s| json_mime?(s) }
      json_accept || accepts.join(',')
    end

    # Return Content-Type header based on an array of content types provided.
    # @param [Array] content_types array for Content-Type
    # @return [String] the Content-Type header  (e.g. application/json)
    def select_header_content_type(content_types)
      # return nil by default
      return if content_types.nil? || content_types.empty?
      # use JSON when present, otherwise use the first one
      json_content_type = content_types.find { |s| json_mime?(s) }
      json_content_type || content_types.first
    end

    # Convert object (array, hash, object, etc) to JSON string.
    # @param [Object] model object to be converted into JSON string
    # @return [String] JSON string representation of the object
    def object_to_http_body(model)
      return model if model.nil? || model.is_a?(String)
      local_body = nil
      if model.is_a?(Array)
        local_body = model.map { |m| object_to_hash(m) }
      else
        local_body = object_to_hash(model)
      end
      local_body.to_json
    end

    # Convert object(non-array) to hash.
    # @param [Object] obj object to be converted into JSON string
    # @return [String] JSON string representation of the object
    def object_to_hash(obj)
      if obj.respond_to?(:to_hash)
        obj.to_hash
      else
        obj
      end
    end

    # Build parameter value according to the given collection format.
    # @param [String] collection_format one of :csv, :ssv, :tsv, :pipes and :multi
    def build_collection_param(param, collection_format)
      case collection_format
      when :csv
        param.join(',')
      when :ssv
        param.join(' ')
      when :tsv
        param.join("\t")
      when :pipes
        param.join('|')
      when :multi
        # return the array directly as typhoeus will handle it as expected
        param
      else
        fail "unknown collection format: #{collection_format.inspect}"
      end
    end

    def apply_auth_to_request!(header_params, auth_names, required_scopes)
      if @config.bearer_token.length != 0
        header_params['Authorization'] = "Bearer #{@config.bearer_token}"
      elsif auth_names.include?("OAuth") && @config.client_id.length != 0 && @config.client_secret.length != 0
        scopes = standardize_scopes required_scopes
        access_token = get_oauth_access_token scopes
        if access_token.nil?
          update_oauth_access_token required_scopes, nil
          access_token = get_oauth_access_token required_scopes
          header_params['Authorization'] = "Bearer #{access_token}"
        end
      elsif @config.username.length != 0  && @config.password.length != 0
        header_params['Authorization'] = create_basic_auth_header @config.username, @config.password
      end

    end

    def get_oauth_access_token(required_scopes)
      token_metadata = @access_token_map[required_scopes]
      if !token_metadata.nil?
        expiration_time = Time.now + 300
        if expiration_time < token_metadata.expiry
          return token_metadata.access_token
        end
      end
      return nil
    end

    def update_oauth_access_token(required_scopes, access_token)
      current_access_token = get_oauth_access_token required_scopes
      if current_access_token.nil? || current_access_token == access_token
        begin
          data = build_oauth_request required_scopes
          timestamp = Time.now + data['expires_in'].to_i
          @access_token_map[required_scopes] = AvalaraSdk::TokenMetadata.new(data['access_token'], timestamp)
        rescue Exception => e
          puts "OAuth2 Token retrieval failed. Error: #{e.message}"
          raise "OAuth2 Token retrieval failed. Error: #{e.message}"
        end
      end
    end

    def build_oauth_request(required_scopes)
      populate_token_url openid_connect_url
      authorization_value = create_basic_auth_header @config.client_id, @config.client_secret
      header_params = {
        "Content-Type" => "application/x-www-form-urlencoded",
        "Accept" => "application/json",
        "Authorization" => authorization_value,
      }
      # req_opts = {
      #   # :method => 'post'.to_sym.downcase,
      #   :headers => header_params,
      #   :body => { "grant_type"=>"client_credentials", "scope"=>"#{required_scopes}" },
      #   :ssl_verifypeer => false,
      #   :ssl_verifyhost => 0,
      #   :http_version => 'httpv1_1',
      #   :verbose => true
      # }
      # request = Typhoeus::Request.new(@token_url, req_opts)
      # response = request.run
      # response = Typhoeus::post(@token_url, req_opts)
      # unless response.success?
      #   if response.timed_out?
      #     fail ApiError.new('Connection timed out')
      #   elsif response.code == 0
      #     # Errors from libcurl will be made visible here
      #     fail ApiError.new(:code => 0,
      #                       :message => response.return_message)
      #   else
      #     fail ApiError.new(:code => response.code,
      #                       :response_headers => response.headers,
      #                       :response_body => response.body),
      #          response.status_message
      #   end
      # end
      # body = response.body
      # JSON.parse("[#{body}]")[0]
      data = { "grant_type"=>"client_credentials", "scope"=>"#{required_scopes}" }

      response = Faraday.post(@token_url) do |req|
        req.headers['Content-Type'] = 'application/x-www-form-urlencoded'
        req.headers['Authorization'] = authorization_value
        req.headers['Accept'] = 'application/json'
        req.body = URI.encode_www_form(data)
      end
      JSON.parse(response.body)
    end

    def create_basic_auth_header(username, password)
      "Basic #{Base64.encode64("#{username}:#{password}")}"
    end

    def populate_token_url(openid_connect_url)
      if @config.environment.downcase == 'test'
        @token_url = @config.test_token_url
      elsif @token_url.nil? || @token_url.length == 0
        begin
          token_response = get_token_url openid_connect_url
          @token_url = token_response['token_endpoint']
        rescue Exception => e
          puts "Exception when calling OpenIdConnect to fetch the token endpoint. Error: #{e.message}"
          raise "Exception when calling OpenIdConnect to fetch the token endpoint. Error: #{e.message}"
        end
      end
    end

    def get_token_url(openid_connect_url)
      req_headers = {
        "Accept" => "application/json",
      }
      req_opts = {
        :method => 'get'.to_sym.downcase,
        :headers => req_headers,
        :ssl_verifypeer => false,
        :ssl_verifyhost => 0,
      }
      request = Typhoeus::Request.new(openid_connect_url, req_opts)
      response = request.run
      unless response.success?
        if response.timed_out?
          fail ApiError.new('Connection timed out')
        elsif response.code == 0
          # Errors from libcurl will be made visible here
          fail ApiError.new(:code => 0,
                            :message => response.return_message)
        else
          fail ApiError.new(:code => response.code,
                            :response_headers => response.headers,
                            :response_body => response.body),
               response.status_message
        end
      end
      body = response.body
      JSON.parse("[#{body}]")[0]
    end

    def standardize_scopes(required_scopes)
      scopes = required_scopes.split(" ")
      scopes.sort
      scopes.join(" ")
    end

    def openid_connect_url
      case @config.environment.downcase
      when 'sandbox'
        SANDBOX_OPENID_CONFIG_URL
      when 'production'
        PRODUCTION_OPENID_CONFIG_URL
      when 'qa'
        QA_OPENID_CONFIG_URL
      end
    end
  end
end
